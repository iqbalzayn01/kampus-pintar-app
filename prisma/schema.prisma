// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Threads {
  id             String     @id @default(uuid())
  title          String
  content        String     @db.Text
  tags           String[]
  author         User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       String
  responses      Response[]
  votes          Vote[]
  bestResponseId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Response {
  id           String  @id @default(uuid())
  content      String  @db.Text
  author       User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  thread       Threads @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId     String
  votes        Vote[]
  isBestAnswer Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}

model Vote {
  id         String    @id @default(uuid())
  type       VoteType
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  thread     Threads?  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId   String?
  response   Response? @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, threadId])
  @@unique([userId, responseId])
}

enum Role {
  ADMIN
  MEMBER
}

model User {
  id           String     @id @default(uuid())
  name         String?
  email        String     @unique
  password     String
  role         Role       @default(MEMBER)
  image        String?
  university   String?
  faculty      String?
  studyProgram String?
  points       Int        @default(0)
  threads      Threads[]
  responses    Response[]
  votes        Vote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
